========> DP문제들 대체로 다 코드가 어렵다기 보단 동작 원리를 생각하는게 어려웠음. 여러번 풀어보면서 익숙해지기
========> 문제 보고 DP테이블 만드는 연습


<<< DynamicProgramming1 >>>

[ 1463 1로 만들기 ]
==> DP 사용해서 풀어야함

[ 11726 2xn 타일링 ]
==> 1000까지 dp리스트 만들어놓고 찾는 방식으로 해결

[ 11727 2xn 타일링2 ]
==> 11726 문제에서 i-2일때 경우의 수 더하는걸 두배로 바꿔줌

[ 11025 카드 구매하기  //  16194 카드 구매하기2]
==> 코드가 어려운건 아닌데 DP원리 적용하는거에 익숙해져야함

[ 15990 1,2,3 더하기5 ]
==> 어려웠음, dp[i][1] dp[i][2] dp[i][3] 다 1000000009로 나누고, 합도 또 1000000009로 나눠줘야 메모리 초과 x

[ 10844 쉬운 계단 수 ]
==> 어려웠음, dp[i][j] -> i번째 자릿수로 j가 올 수 있는 경우의 수

[ 2193 이친수 ]
==> 10844 풀고 나서 푸니까 쉬웠음 똑같은 방식으로 풀면 됨

[ 11053 가장 긴 증가하는 부분 수열 // 14002 가장 긴 증가하는 부분 수열4]
==> 얘도 코드 작동 이해하는게 어렵

[ 1912 연속합 ]
==> dp테이블 만드는거 이해하기 힘들어서 구글링으로 풀었음. 다시 보기

[ 1699 제곱수의 합 ]
==> 시간초과 나와서 구글링 했는데 그것도 시간초과 나옴;; 모르겠음 --> @@ pypy3에서는 맞음. 알고리즘 문제 없음 @@

@@[ 2225 합분해 ]@@
==> dp표 만들어가면서 점화식 도출하는 연습 필요함(구글링으로 풀었음) 결과는 나오는데 자꾸 런타임 에러 뜸.


<<< DynamicProgramming1 (practice) >>>

[ 2156 포도주 시식 ]
==> dp점화식 만들기 어려웠음, i,i-1번째 마시는 경우 / i, i-2번째 마시는 경우, i-1,i-2번째 마시는 경우 나누기

@@[ 1932 정수 삼각형 ]@@
==> 각 위치별로 선택할 때마다 최고값을 골라서 더하는 방식으로 dp테이블 만듦. 답은 나오는데 계속 런타임 에러

@@[ 13398 연속합2 ]@@
==> 알고리즘은 맞는것 같은데 시간초과, 시간 못줄이겠음;;

[ 2133 타일 채우기 ]
==> ((((매우어려움)))), 이해가 안됐음. 구글링함


<<< DynamicProgramming1 (challenge) >>>

[ 17404 RGB거리2 ]
==> ((((어려움)))), 구글링했음
==> 임의의 큰 정수인 sys.maxsize 사용해서 첫번째 집에 R,G,B중 한가지 색만 칠하는 경우를 각각 실행해서 N번째 집은 첫번째 집과 다른 색을 사용하도록 해서 최소값 비교함
